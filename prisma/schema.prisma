generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  @@map("brands")
}

model Mount {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  cameras Camera[]
  lenses  Lens[]

  @@map("mounts")
}

model Product {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brandId        Int
  name           String           @unique
  type           ProductType
  price          Int?             @default(dbgenerated("0.00"))
  releaseDate    DateTime?        @db.Date
  weight         Int?
  mpn            String?
  Offer          Offer[]
  ProductsOnKits ProductsOnKits[]
  camera         Camera?
  lens           Lens?
  ownership      Ownership[]
  Brand          Brand            @relation(fields: [brandId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "products_brand_fkey")

  @@map("products")
}

model Camera {
  id         Int     @id @default(autoincrement())
  mountId    Int
  productId  String  @unique(map: "cameras_product_id_key") @db.Uuid
  megapixels Float?  @db.Real
  cropFactor Float   @default(1) @db.Real
  mounts     Mount   @relation(fields: [mountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cameras_mount_id_fkey")
  products   Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "cameras_product_id_fkey")

  @@map("cameras")
}

model Lens {
  id           Int        @id @default(autoincrement())
  mountId      Int
  zoom_prime   zoom_prime
  minFl        Int        @db.SmallInt
  maxAperture  Float      @db.Real
  filterThread Int?
  maxFl        Int?       @db.SmallInt
  productId    String     @unique(map: "lenses_product_id_key") @db.Uuid
  mounts       Mount      @relation(fields: [mountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lenses_mount_id_fkey")
  products     Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lenses_product_id_fkey")

  @@map("lenses")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Ownership {
  id            Int        @id @default(autoincrement())
  userId        String
  serialNumber  String?
  purchaseDate  DateTime?  @db.Date
  price         Float      @default(0) @db.Real
  productId     String     @db.Uuid
  itemCondition Condition? @default(NewCondition)
  products      Product    @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ownership_product_id_fkey")
  users         User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("ownership")
}

model Kit {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  createdOn      DateTime         @default(now())
  ownerId        String
  owner          User             @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ProductsOnKits ProductsOnKits[]
}

model ProductsOnKits {
  kitId     String  @db.Uuid
  productId String  @db.Uuid
  kit       Kit     @relation(fields: [kitId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, kitId])
}

model Offer {
  date          DateTime  @default(now()) @db.Date
  itemCondition Condition
  price         Decimal   @db.Money
  priceCurrency String
  productId     String    @db.Uuid
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([date, productId])
}

model User {
  id        String      @id
  name      String?
  kit       Kit[]
  ownership Ownership[]

  @@map("users")
}

enum zoom_prime {
  zoom
  prime
  teleconverter
}

enum ProductType {
  camera
  lens
  accessory

  @@map("product_types")
}

enum Condition {
  DamagedCondition
  NewCondition
  RefurbishedCondition
  UsedCondition
}
