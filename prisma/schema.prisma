generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Mount {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  cameras Camera[]
  lenses  Lens[]
}

model Product {
  id          String    @id @default(cuid())
  brandId     Int
  name        String    @unique
  type        String
  price       Int?
  releaseDate DateTime?
  weight      Int?
  mpn         String?
  asin        String?

  // createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt

  camera         Camera?
  lens           Lens?
  offers         Offer[]
  productsOnKits ProductsOnKits[]
  ownerships     Ownership[]

  brand Brand @relation(fields: [brandId], references: [id], onDelete: Restrict)
}

model Camera {
  productId  String @id
  mountId    Int
  megapixels Float?
  cropFactor Float  @default(1)

  mount   Mount   @relation(fields: [mountId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Lens {
  productId    String @id
  mountId      Int
  type         String
  maxAperture  Float
  minFl        Float
  maxFl        Float?
  filterThread Float?

  mount   Mount   @relation(fields: [mountId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Ownership {
  id            String    @id @default(cuid())
  userId        String
  productId     String
  price         Int
  itemCondition String
  serialNumber  String?
  purchaseDate  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Kit {
  id             String           @id @default(cuid())
  name           String
  ownerId        String
  productsOnKits ProductsOnKits[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductsOnKits {
  kitId     String
  productId String

  kit     Kit     @relation(fields: [kitId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, kitId])
}

model Offer {
  date          DateTime @default(now())
  productId     String
  itemCondition String
  price         Int
  priceCurrency String   @default("USD")

  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([date, productId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kit       Kit[]
  ownership Ownership[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
